//Napomena: U rješenju svaka klasa treba da posjeduje odgovarajuci header i cpp file.

#include<iostream>

using namespace std;

class Vrijeme {
	int _sati;
	int _minute;
	int _sekunde;
public:
	Vrijeme()
	{
		_sati = 0;
		_minute = 0;
		_sekunde = 0;
	}
	Vrijeme(int sati,int minute,int sekunde)
	{
		_sati = sati;
		_minute = minute;
		_sekunde = sekunde;
	}
	Vrijeme(int sati, int minute)
	{
		_sati = sati;
		_minute = minute;
		_sekunde =0;
	}
	//Konstruktor bez parametara
	//Konstruktor sa 3 parametra (sati, minute i sekunde)
	//Konstruktor sa 2 parametra (sati i minute)

	//Funkciju Info sa neobaveznim parametrom tipa bool koji odreduje da li ce vrijeme biti ispisano u punom formatu
	//(hh:mm:ss) ili u skracenom formatu (hh:mm). Default-no funkcija vrši ispis u punom formatu.
	void Info(bool puniformat=true)
	{
		if (puniformat)
			cout << _sati << ":" << _minute << ":" << _sekunde << endl;
		else
			cout << _sati << ":" << _minute<< endl;

	}
};

class Datum
{
	int _dan;
	int _mjesec;
	int _godina;
public:
	//Potrebne konstruktor i destruktor funkcije
	Datum(int dan=1, int mjesec=1, int godina=2000)
	{
		_dan = dan;
		_mjesec = mjesec;
		_godina = godina;
	}
	void Info()
	{
		cout << _dan << "." << _mjesec << "." << _godina << endl;
	}
	//Funkciju Info
};

enum TipKorisnika { Administrator, Guest };
class Korisnik
{
	char _ime[30];
	char _korisnickoIme[20];
	char _lozinka[30];
	TipKorisnika _tipKorisnika; //Administrator, Guest
public:
	Korisnik()
	{
		strncpy_s(_korisnickoIme, 30, "N/A", _TRUNCATE);

	}
	Korisnik(const char* ime, const char* korisnickoime,TipKorisnika tipkorisnika,const char* lozinka = "N/A")
	{
		strncpy_s(_ime, 30, ime,_TRUNCATE);
		strncpy_s(_korisnickoIme, 30, korisnickoime, _TRUNCATE);
		strncpy_s(_lozinka, 30, lozinka, _TRUNCATE);

	



	}
	void Info()
	{
		cout << _ime << endl;
		cout << _korisnickoIme << endl;
		cout << _lozinka << endl;
	}
	//Potrebne konstruktor i destruktor funkcije

	//Funkciju za promjenu korisnicke lozinke
	bool PromijeniLozinku(const char* novalozinka)
	{
		if (strcmp(_lozinka, novalozinka) == 0)
			return false;
		strncpy_s(_lozinka, 30, novalozinka, _TRUNCATE);
		return true;
	}
	//Funkciju Info
	char* GetKorisnickoIme() { return _korisnickoIme; }


};

class Komentar
{
	char _tekst[50];
	Datum _datum;
	Vrijeme _satnica;
	int _popularnost;
	Korisnik _autor;
public:
	Komentar()
	{

	}
	Komentar(const char* tekst, Datum datum, Vrijeme satnica, Korisnik &autor) :_datum(datum), _satnica(satnica), _autor(autor)
	{
		strncpy_s(_tekst, 30, tekst, _TRUNCATE);
		strcpy_s(_tekst, strlen(tekst) + 1, tekst);
		_popularnost = 0;

	}
	//Potrebne konstruktor i destruktor funkcije

	//Funkciju za izmjenu popularnosti komentara
	void IzmjeniPopularnostKomentara(int broj)
	{
		_popularnost = broj;
	}
	//Funkciju Info

	void Info()
	{
		cout << _tekst;
		_autor.Info();
		_satnica.Info();
		cout << _popularnost;
	}
};

class Clanak
{
	char _naslov[150];
	char* _sadrzaj;
	Datum _datum;
	Vrijeme _satnica;
	int _brojPregleda;
	char* _tagovi[10];
	char _oblast[100];
	Korisnik _autor;
	Komentar* _komentari;
	int _brojKomentara;
public:
	Clanak(const char* naslov, const char* sadrzaj, Datum datum, Vrijeme satnica, Korisnik& autor,const char* oblast) :_datum(datum), _satnica(satnica)
	{
		strncpy_s(_naslov, 150, naslov, _TRUNCATE);
		_sadrzaj = new char[strlen(sadrzaj) + 1];
		strcpy_s(_sadrzaj, strlen(sadrzaj) + 1, sadrzaj);
		_brojPregleda = 0;
		for (size_t i = 0; i < 10; i++)
		{
			_tagovi[i] = nullptr;
		}
		strncpy_s(_oblast, 150, oblast, _TRUNCATE);
		_komentari = nullptr;
		_brojKomentara = 0;
		_autor = autor;
	}
	void DodajTag(const char* novitag)
	{
		for (size_t i = 0; i < 10; i++)
		{
			if (_tagovi[i] == nullptr)
			{
				_tagovi[i] = new char[strlen(novitag) + 1];
				strcpy_s(_tagovi[i], strlen(novitag) + 1, novitag);
				return;
			}
		}
	}
	bool PromijeniSadrzajiVrijeme(const char* sadrzaj, Vrijeme& satnica,const char*korisnik)
	{
		if (strcmp(_autor.GetKorisnickoIme(), korisnik) == 0)
		{
			delete[]_sadrzaj;
			_sadrzaj = new char[strlen(sadrzaj) + 1];
			strcpy_s(_sadrzaj, strlen(sadrzaj) + 1, sadrzaj);
			_satnica = satnica;
			return true;
		}
		return false;
	}
	//Funkciju za dodavanje tagova za clanak

	/*Funkciju za promjenu sadržaja i vremena promjene clanka. Kao verifikaciju dozvole potrebno je proslijediti korisnicko ime autora clanka.
	Samo kreator clanka ima permisije da mijenja njegov sadržaj.
	*/
	void DodajKomentar(Komentar& noviKomentar)
	{
		if (_komentari == nullptr)
		{
			_komentari = new Komentar[_brojKomentara + 1];
			_komentari[_brojKomentara++] = noviKomentar;
			return;
			
		}
		Komentar *temp = new Komentar[_brojKomentara + 1];
		for (size_t i = 0; i < _brojKomentara; i++)
		{
			temp[i] = _komentari[i];
		}
		temp[_brojKomentara++] = noviKomentar;
		delete[] _komentari;
		_komentari = temp;
	

	}
	void Info()
	{
		cout << _sadrzaj << endl;
		_satnica.Info();
		for (size_t i = 0; i < 10; i++)
		{
			
			if (_tagovi[i] != nullptr)
			{
				cout << "Prolaz";
				cout << _tagovi[i];
			}
		}
		
			for (size_t i = 0; i < _brojKomentara; i++)
			{
				_komentari[i].Info();
			}
			_autor.Info();
	}
	//Funkciju za dodavanje komentara

	//Funkciju Info
	~Clanak()
	{
		delete[]_komentari;
		for (size_t i = 0; i < 10; i++)
		{
			if (_tagovi[i] != nullptr)
			{
				delete[] _tagovi[i]; _tagovi[i] != nullptr;
			}
		}
		delete[]_sadrzaj; _sadrzaj = nullptr;
	}

};

int main()
{
	//Kreirati testni program koji demonstrira implementirane funckionalnosti
	Vrijeme v1;
	Vrijeme v3(12, 30, 40);
	Vrijeme v2(13, 20);
	v3.Info();
	v3.Info(false);
	Datum danas(11, 3, 2019), sutra(12, 3, 2019);
	danas.Info();
	Korisnik Jasmin("Jasmin Azemovic", "JasminA", Administrator, "lozinka");
	Korisnik Denis("Denis Music", " DenisM",Guest);
	Jasmin.Info();
	Denis.Info();
	if(Denis.PromijeniLozinku("Pa$$w0rd"))
	Denis.Info();
Komentar komentar1("Ovo je komentar", danas, v3, Denis);
Komentar komentar2("Ovo je komentar2", danas, v3, Jasmin);
komentar1.Info();
komentar2.IzmjeniPopularnostKomentara(29);
komentar2.Info();

Clanak clanak1("Clanak1", "Ovo je sadrzaj", danas, v2, Jasmin, "OBLAST");
clanak1.Info();
clanak1.DodajTag("NoviTag");
clanak1.Info();
clanak1.DodajKomentar(komentar1);
clanak1.DodajKomentar(komentar2);
clanak1.Info();
if (clanak1.PromijeniSadrzajiVrijeme("NoviSadrzaj", v3, "JasminA"))
cout << "Uspjesno ste promijenili sadrzaj." << endl;



	system("pause");
	return 0;
}


