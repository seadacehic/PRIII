//
//1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
//2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I / ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR CE BITI OZNACENO KAO "RE"
//3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA
//**************************************************************************** /
#include <iostream>
using namespace std;
char * AlocirajNizKaraktera(const char * sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char * temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}
template<class T1, class T2>
class Kolekcija {
	T1 * _elementi1;
	T2 * _elementi2;
	int _trenutnoElemenata;
public:
	Kolekcija()
	{
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_trenutnoElemenata = 0;
	}
	Kolekcija(const Kolekcija& obj)
	{
		_trenutnoElemenata = obj._trenutnoElemenata;
		
			_elementi1 = new T1[obj._trenutnoElemenata];
			_elementi2 =new T2[obj._trenutnoElemenata];
			for (size_t i = 0; i < obj._trenutnoElemenata; i++)
			{
				_elementi1[i] = obj._elementi1[i];
				_elementi2[i] = obj._elementi2[i];
			}
		
		
	}
	void AddElement(T1 el1, T2 el2)
	{
		T1 *temp = new T1[_trenutnoElemenata + 1];
		T2 *temp2 = new T2[_trenutnoElemenata + 1];

		for (size_t i = 0; i < _trenutnoElemenata; i++)
		{
			temp[i] = _elementi1[i];
			temp2[i] = _elementi2[i];
		}
		temp[_trenutnoElemenata] = el1;
		temp2[_trenutnoElemenata++] = el2;
		delete[]_elementi1; delete[]_elementi2;

		_elementi1 = temp;
		_elementi2 = temp2;
  }
	Kolekcija & operator=(const Kolekcija& obj)
	{
		if (this != &obj)
		{
			_trenutnoElemenata = obj._trenutnoElemenata;
		          delete[]_elementi1; delete[]_elementi2;
			
			_elementi1 = new T1[_trenutnoElemenata];
			_elementi2 = new T2[_trenutnoElemenata];
			for (size_t i = 0; i < obj._trenutnoElemenata; i++)
			{
				_elementi1[i] = obj._elementi1[i];
				_elementi2[i] = obj._elementi2[i];
			}
		
		}
		return*this;
	}
	void RemoveElement(int lokacija)
	{
		if(lokacija>=0 && lokacija<_trenutnoElemenata)
{
		T1 *temp = new T1[_trenutnoElemenata-1];
		T2 *temp2 = new T2[_trenutnoElemenata-1];

		for (size_t i = 0, j=0; i < _trenutnoElemenata; i++)
		{
			if (i != lokacija)
			{
				temp[j] = _elementi1[i];
				temp2[j++] = _elementi2[i];
			
		    }
		}
		delete[]_elementi1; delete[]_elementi2;
		_elementi1 = temp;
		_elementi2 = temp2;
		_trenutnoElemenata--;
}

	}
	int getTrenutno() const { return _trenutnoElemenata; }
	T1& operator[](int lokacija) { return _elementi1[lokacija]; }

	friend  ostream& operator<< <>(ostream& COUT, const Kolekcija &obj);
	~Kolekcija()
	{
		delete[]_elementi1;
		delete[]_elementi2;
		_elementi1 = nullptr;
		_elementi2 = nullptr;
	}
	
};
template<class T1, class T2>
ostream& operator<< <>(ostream& COUT, const Kolekcija<T1,T2> &obj)
{
	for (size_t i = 0; i < obj._trenutnoElemenata; i++)
	{
		COUT << obj._elementi1[i] << endl;
		COUT << obj._elementi2[i] << endl;
	}
	return COUT;
}

class Datum {
	int *_dan, *_mjesec, *_godina;
public:
	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}
	Datum(const Datum& obj)
	{
		_dan = new int(*obj._dan);
		_mjesec = new int(*obj._mjesec);
		_godina = new int(*obj._godina);
	}
	Datum&  operator=(Datum& obj)
	{
		if (this != &obj)
		{
			*_dan = *obj._dan;
			*_mjesec = *obj._mjesec;
			*_godina = *obj._godina;
		}
		return *this;
	}
	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}
	friend ostream& operator<< (ostream &COUT,const Datum &obj) {
		COUT << *obj._dan << " " << *obj._mjesec << " " << *obj._godina;
		return COUT;
	}
};
class Student {
	char * _imePrezime;
	Datum * _datumRodjenja;
public:
	Student(const char * imePrezime = "---", Datum d = Datum()) {
	
		_imePrezime = AlocirajNizKaraktera(imePrezime);
		_datumRodjenja = new Datum(d);
	}
	Student(const Student& obj)
	{
		_imePrezime = AlocirajNizKaraktera(obj._imePrezime);
		_datumRodjenja = new Datum(*obj._datumRodjenja);
	}
	Student& operator=(Student& obj)
	{
		if (this != &obj)
		{
			delete[]_imePrezime;
			_imePrezime = AlocirajNizKaraktera(obj._imePrezime);
			*_datumRodjenja = *obj._datumRodjenja;
		}
		return *this;
	}
	friend ostream& operator<<(ostream& COUT, const Student& obj)
	{
		COUT << obj._imePrezime << endl;
		COUT << *obj._datumRodjenja << endl;
		return COUT;
	}
	~Student() { delete[] _imePrezime; delete _datumRodjenja; }
	bool operator==(Student& obj)
	{
		if (strcmp(_imePrezime, obj._imePrezime) == 0)
			return true;
		return false;
	 }
};
class Ispit {
	Datum _datumOdrzavanja;
	char * _opisIspita;
	Kolekcija<Student, Datum> _prijave;
	Kolekcija<Student, int> _rezultati;
public:
	Ispit(const char* opisIspita, Datum d)
	{
		_opisIspita = AlocirajNizKaraktera(opisIspita);
		_datumOdrzavanja = d;
	}
	bool DodajPrijavu(Student s, Datum d)
	{
		for (size_t i = 0; i < _prijave.getTrenutno(); i++)
		{
			if (_prijave[i] == s)
				return false;
		}
		_prijave.AddElement(s, d);
		return true;
	}
	void DodajRezultat(Student s, int ocjena)
	{
		for (size_t i = 0; i < _prijave.getTrenutno(); i++)
		{
			if (_prijave[i] == s)
			{
				for (int j = 0; j < _rezultati.getTrenutno(); j++)
				{
					if (_rezultati[j] == s)
						return;
				}
			}
			
		}
		_rezultati.AddElement(s, ocjena);
 }
	void ZakljuciRezultate()
	{
		for (size_t i = 0; i < _prijave.getTrenutno(); i++)
		{
			bool zakljuceno = false;
			for (size_t j= 0; j < _rezultati.getTrenutno(); j++)
			{

				if (_prijave[i] == _rezultati[j])
				{
					zakljuceno = true;
					break;
				}	
					
			}
			if (!zakljuceno)
			{
				_rezultati.AddElement(_prijave[i], 5);
			
			}

		}
	}
	friend ostream& operator<<(ostream& COUT, const Ispit& ispit)
	{
		if (ispit._prijave.getTrenutno() == ispit._rezultati.getTrenutno())
		{
			COUT << "Datum ispita: " << ispit._datumOdrzavanja << endl;
			COUT << "Opis ispita: " << ispit._opisIspita << endl;
			COUT << "Prijave: \n" << ispit._prijave << endl;
			COUT << "Prijave: \n" << ispit._rezultati << endl;
		}
		else
		COUT << "Rezultati jos nisu zakljuceni." << endl;
		return COUT;
	}
};
const char *crt = "\n--------------------------------------------------\n";
void main() {

	//REGIONI olaksavaju organizaciju programskog code-a, te ih mozete ukloniti ukoliko vam otezavaju preglednost

#pragma region TestiranjeKolekcije
	Kolekcija<int, double> kolekcija1;
	for (size_t i = 0; i < 50; i++)
		kolekcija1.AddElement(i, i + 0.3);
	cout << kolekcija1 << endl;
	cout << crt;
	Kolekcija<int, double> kolekcija2;
	kolekcija2 = kolekcija1;
	kolekcija1.RemoveElement(2);//UMANJITI VELICINU NIZA
	//cout << kolekcija2 << crt;


	if (kolekcija1.getTrenutno() == kolekcija2.getTrenutno())
		cout << "ISTI BROJ ELEMENATA" << endl;
	Kolekcija<int, double> kolekcija3(kolekcija2);
	cout << kolekcija3 << crt;
#pragma endregion

#pragma region TestiranjeDatuma
	Datum danas(26, 11, 2015);
	Datum sutra(danas);
	Datum prekosutra;
	prekosutra = danas;
	cout << danas << endl << sutra << endl << prekosutra << crt;
#pragma endregion

#pragma region TestiranjeStudenta
	Student denis("Denis Music", Datum(26, 11, 1990));
	Student jasmin("Jasmin Azemovic", Datum(22, 11, 1990));
	Student goran;
	goran = jasmin;
	Student adel("Adel Handzic", Datum(25, 8, 1990));
	Student marija("Marija Herceg", Datum(15, 6, 1990));
	
#pragma endregion

#pragma region TestiranjeIspita
Ispit prIII("PRIII::26.11.2015", danas);
	////DodajPrijavu - dodaje novog studenta u listu prijavljenih za ispti. onemoguciti dodavanje dva ista studenta
	if (prIII.DodajPrijavu(denis, danas))
	cout << denis << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(jasmin, danas))
		cout << jasmin << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(goran, danas))//Ne dodaje gorana jer je goran isto sto i Jasmin.
		cout << jasmin << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(adel, danas))
	cout << adel << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(marija, danas))
		cout << marija << " DODAT na spisak" << endl;



	cout << crt << endl;
	///*DodajRezultat - dodaje ocjenu koju je student ostvario na ispitu. za dodavanje ocjene student je prethodno trebao biti prijavljen na ispit
	//*/
	prIII.DodajRezultat(denis, 7);
	prIII.DodajRezultat(jasmin, 6);
	prIII.DodajRezultat(adel, 8);
	prIII.DodajRezultat(marija, 9);


	///*ZakljuciRezultate - dodaje ocjenu 5 svim studentima koji su prijavili ispit a nije im evidentirana ocjena*/
	prIII.ZakljuciRezultate();
	////rezultati ispita se smiju ispisivati jedino ukoliko su prethodno zakljuceni
	cout << prIII << crt;

	//Ispit prIII_2(prIII);
	//cout << prIII_2 << crt;
#pragma endregion

	system("pause");
}