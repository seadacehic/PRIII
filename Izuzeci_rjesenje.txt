#include <iostream>
using namespace std;
const char * ln = "\n---------------------------------------\n";


const char * Alociraj(const char * sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char * temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
	/*
	implementirati funkciju koja æe za sadrzaj koji je proslijedjen kao
	parametar
	izvrsiti alociranje memorije, kopiranje karaktera i vracanje pokazivaca
	na
	alociranu lokaciju. funkciju iskoristiti na svim mjestima gdje je
	potrebna
	alokacija niza karaktera
	*/
	//return nullptr;
}
/////////////////////////////DATUM//////////////////////////////////////
class Datum {
	int _dan, _mjesec, _godina;
public:
	Datum(int d = 1, int m = 1, int g = 2000) {
		_dan = d;
		_mjesec = m;
		_godina = g;
	}
	Datum( Datum &obj) {
		_dan = obj._dan;
		_mjesec = obj._mjesec;
		_godina = obj._godina;
	}
	Datum operator=(Datum &obj) {
		_dan = obj._dan;
		_mjesec = obj._mjesec;
		_godina = obj._godina;
		return *this;
	}
	friend ostream & operator<< (ostream & COUT, Datum & obj);
	//KLASU DATUM PROSIRITI OPERATORSKIM FUNKCIJA KOJE CE BITI
	//POTREBNE U NASTAVKU PROGRAMA
};
ostream & operator<< (ostream & COUT, Datum & obj) {
	COUT << obj._dan << "/" << obj._mjesec << "/" << obj._godina;
	return COUT;
}


class NedozvoljenaOperacija : public exception {
	int linijaKoda;
public:

	//Konstruktor sa dva parametra (poruka i linija koda u kojoj je greška nastala)
	NedozvoljenaOperacija(const char * poruka, int lin) :exception(poruka)
	{
		linijaKoda = lin;
	}

	//Funkcija za ispis informacija o nastaloj grešci
	void ErrorInfo()
	{
		cout << "Greska u liniji koda: " << linijaKoda << ", opis greske: " << exception::what() << endl;
	}
};


/////////////////////////////PREDMET//////////////////////////////////////
class Predmet {
protected:
	int _predmetID;
	char * _naziv;
	char * _predavaci[5];
	int _brojPredavaca;
public:
	Predmet(int id, const char * naziv, const char * predavac) {
		_predmetID = id;
		int size = strlen(naziv) + 1;
		_naziv = new char[size];
		strcpy_s(_naziv, size, naziv);
		_brojPredavaca = 0;
		
		size = strlen(predavac) + 1;
		_predavaci[_brojPredavaca] = new char[size];
		strcpy_s(_predavaci[_brojPredavaca], size, predavac);
		_brojPredavaca++;
	}
	Predmet(Predmet & obj) {
		_predmetID = obj._predmetID;
		int size = strlen(obj._naziv) + 1;
		_naziv = new char[size];
		strcpy_s(_naziv, size, obj._naziv);
		_brojPredavaca = obj._brojPredavaca;
		for (int i = 0; i < _brojPredavaca; i++) {
			size = strlen(obj._predavaci[i]) + 1;
			_predavaci[i] = new char[size];
			strcpy_s(_predavaci[i], size, obj._predavaci[i]);
		}
	}
	~Predmet() {
		delete[] _naziv;
		_naziv = nullptr;
		for (int i = 0; i < _brojPredavaca; i++) {
			delete[] _predavaci[i];
			_predavaci[i] = nullptr;
		}
	}
	int GetPredmetID() { return _predmetID; }

	void DodajPredavaca(const char * ime) {
		if (_brojPredavaca == 5)
			throw NedozvoljenaOperacija("Prekoracen broj predavaca ", __LINE__);
			//throw exception("Prekoracen broj predavaca ");
		for (int i = 0; i < _brojPredavaca; i++)
			if (strcmp(_predavaci[i], ime) == 0)
				throw exception("Predavac vec postoji ");
		int size = strlen(ime) + 1;
		_predavaci[_brojPredavaca] = new char[size];
		strcpy_s(_predavaci[_brojPredavaca], size, ime);
		_brojPredavaca++;
	}
	 friend ostream & operator<< (ostream & COUT, Predmet & obj);
};
ostream & operator<< (ostream & COUT, Predmet & obj) {
	COUT << obj._predmetID << " " << obj._naziv << ln;
	for (int i = 0; i < obj._brojPredavaca; i++)
		COUT << obj._predavaci[i] << endl;
	return COUT;
}

/////////////////////////////POLOZENIPREDMET//////////////////////////////////////
class PolozeniPredmet : public Predmet {
	Datum _datumPolaganja;
	int _ocjena;
public:
	PolozeniPredmet() :Predmet(0, "-", "-") {
		_ocjena = 5;
	}
	PolozeniPredmet(int id, const char * naziv, const char * predavac, Datum dp, int ocj) :Predmet(id, naziv, predavac), _datumPolaganja(dp)
	{
		_ocjena = ocj;
	}
	PolozeniPredmet(PolozeniPredmet & obj) :
		Predmet(obj), _datumPolaganja(obj._datumPolaganja)
	{
		_ocjena = obj._ocjena;
	}
	bool operator==(PolozeniPredmet & obj) {
		//U PROVJERU JEDNAKOSTI UKLJUCITI I SVE OSTALE ATRIBUTE KLASE PolozeniPredmet
			if (strcmp(obj._naziv, _naziv) == 0 && obj._predmetID == _predmetID
				&&
				obj._brojPredavaca == _brojPredavaca)
				return true;
		return false;
	}
	PolozeniPredmet & operator=(PolozeniPredmet & obj) {
		//OPERATOR= IMPLEMENTIRATI NA DRUGACIJI NACIN, A TOM PRILIKOM VODITI RAÈUNA O
			//1. POTREBNIM DEALOKACIJA
			//2. PRAVILNOM PONASANJU FUNKCIJE U SLUCAJU KADA SE RADI O ISTIM OBJEKTIMA
			_predmetID = obj._predmetID;
		int size = strlen(obj._naziv) + 1;
		_naziv = new char[size];
		strcpy_s(_naziv, size, obj._naziv);
		_brojPredavaca = obj._brojPredavaca;
		for (int i = 0; i < _brojPredavaca; i++) {
			size = strlen(obj._predavaci[i]) + 1;
			_predavaci[i] = new char[size];
			strcpy_s(_predavaci[i], size, obj._predavaci[i]);
		}
		_datumPolaganja = obj._datumPolaganja;
		_ocjena = obj._ocjena;
		return *this;
	}
	friend ostream & operator<< (ostream & COUT, PolozeniPredmet & obj);
};
ostream & operator<< (ostream & COUT, PolozeniPredmet & obj) {
	COUT << (Predmet&)obj << ln;
	COUT << obj._datumPolaganja << " " << obj._ocjena;
	return COUT;
}

/////////////////////////////KOLEKCIJA//////////////////////////////////////
template<class T>
class Kolekcija {
	T * _elementi;
	int _max;
	int _trenutno;
public:
	Kolekcija(int max = 10) {
		_max = max;
		_trenutno = 0;
		_elementi = new T[_max];
	}
	~Kolekcija() {
		delete[] _elementi;
		_elementi = nullptr;
	}
	bool AddElement(T & ele) {
		for (int i = 0; i < _trenutno; i++)
			if (ele == _elementi[i])
				return false; 
			if (_trenutno == _max) {
				_max += 5;
				T * temp = new T[_max];
				for (int i = 0; i < _trenutno; i++)
					temp[i] = _elementi[i];
				delete[] _elementi;
				_elementi = temp;
			}
		_elementi[_trenutno] = ele;
		_trenutno++;
		return true;
	}
	bool RemoveElement(T & ele) {
		for (int i = 0; i < _trenutno; i++)
			if (ele == _elementi[i]) {
				for (int j = i; j < _trenutno - 1; j++) {
					_elementi[j] = _elementi[j + 1];
				}
				cout << endl;
				_trenutno--;
				return true;
			}
		return false;
	}
	
		T* operator[] (int lokacija) {
		if (lokacija >= 0 && lokacija < _trenutno)
			return &_elementi[lokacija];
		return nullptr;
	}
	int GetTrenutno() { return _trenutno; }
	friend ostream & operator<< <>(ostream & COUT, Kolekcija<T> & obj);
};
template<class T>
ostream & operator<< <> (ostream & COUT, Kolekcija<T> & obj) {
	for (int i = 0; i < obj._trenutno; i++)
		COUT << obj._elementi[i] << ln;
	return COUT;
}

///////////////////////////Student///////////////////////////////
class Student {
	int _brojIndeksa;
	char * _imePrezime;
	Kolekcija<PolozeniPredmet> _polozeni;
public:
	Student(int brInd, const char * ip) {
		_brojIndeksa = brInd;
		int size = strlen(ip) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, ip);
	}
	~Student() {
		delete[] _imePrezime;
		_imePrezime = nullptr;
	}
	bool DodajPolozeni(int id, const char * naziv, const char * predavac, Datum dp, int ocj) {
		PolozeniPredmet * temp = new PolozeniPredmet(id, naziv, predavac, dp, ocj);
		return _polozeni.AddElement(*temp);
	}
	bool UkloniPredmetPoIDu(int id) {
			//UMJESTO OPERATORA[] PREDLOZITI NEKO DRUGO RJESENJE ZA PRISTUP CLANOVIMA KLASE KOLEKCIJA
			PolozeniPredmet * temp = nullptr;
		for (int i = 0; i < _polozeni.GetTrenutno(); i++) {
			temp = _polozeni[i];
			if (temp != nullptr) {
				if (temp->GetPredmetID() == id) {
					_polozeni.RemoveElement(*temp);
					return true;
				}
			}
		}
		return false;
	}
	friend ostream & operator<< (ostream & COUT, Student & obj);
};
ostream & operator<< (ostream & COUT, Student & obj) {
	COUT << obj._brojIndeksa << " " << obj._imePrezime << ln;
	COUT << obj._polozeni << ln;
	return COUT;
}

void main() {
	try {
		
		Student a(1122, "Chuck Norris");
		
		Datum d(12, 5, 2019);
		Datum d2(13, 5, 2019);
		a.DodajPolozeni(1, "Uvod u programiranje", "doc.dr. Emina Junuz", d, 8);
		a.DodajPolozeni(2, "Programiranje I", "doc.dr. Jasmin Azemovic", d,10);
		a.DodajPolozeni(3, "Programiranje II", "doc.dr. Emina Junuz", d,9);
		cout << a;
		a.UkloniPredmetPoIDu(2);
		cout << ln << "NAKON UKLANJANJA PREDMETA SA ID-om: 2" << ln << endl;
		cout << a;
		Predmet p(1, "PR1", "Sedina Gosto");
		Predmet p2(2, "PR2", "Jasmin Azemovic");
		Predmet p3(3, "PR3", "Denis Music");
		p.DodajPredavaca("Seada Cehic");
		
		//p.DodajPredavaca("Seada5 Cehic"); //prekoracen broj unosa predavaca -> 5 
		//p.DodajPredavaca("Seada Cehic"); //isti predavac <- exception
		Predmet p4(4, "PR", "Seada Cehic");
		cout << p << endl;
		PolozeniPredmet pp(1, "PR", "Sedina Gosto", d2, 10);
		PolozeniPredmet pp2(2, "PR2", "Jasmin Azemovic", d, 10);
		PolozeniPredmet pp3(3, "PR3", "Denis Music", d, 8);
		PolozeniPredmet pp4(4, "PR", "Seada Cehic",d2, 9);
		cout <<"Polozeni predmet:" << pp << pp2 << pp3 << pp4 << endl;
		
	}
	catch (exception & obj) {
		cout << "Greska: " << obj.what() << endl;
	}
	system("pause");
}